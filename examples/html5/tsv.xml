<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="2">

<css lib="datatables buttons"/>
<js lib="jquery datatables buttons jszip buttons-html5">
<![CDATA[

$('#example').DataTable({
	layout: {
		topStart: {
			buttons: [
				'copyHtml5',
				{
					text: 'TSV',
					extend: 'csvHtml5',
					fieldSeparator: '\t',
					extension: '.tsv'
				}
			]
		}
	}
});

]]>
</js>

<js-vanilla>
<![CDATA[

new DataTable('#example', {
	layout: {
		topStart: {
			buttons: [
				'copyHtml5',
				{
					text: 'TSV',
					extend: 'csvHtml5',
					fieldSeparator: '\t',
					extension: '.tsv'
				}
			]
		}
	}
});

]]>
</js-vanilla>

<title lib="Buttons">Tab separated values</title>

<info><![CDATA[

The `b-button copyHtml5` and `b-button csvHtml5` buttons have the option to specify the character (or more generally a full string) that separates the values between fields. By default this is a tab character for the copy button, but the _Comma_ Separated Values button uses a comma.

The `fieldSeparator` option is used to specify the field separator  - in this example the exported file is a tab separated values file. The file extension has also been set to reflect this, although that is optional as most spreadsheet applications will read TSV files without issue.

]]></info>

</dt-example>

