<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="15">

<css lib="datatables buttons"/>
<js lib="jquery datatables buttons buttons-html5">
<![CDATA[

$('#example').DataTable({
	layout: {
		topStart: {
			buttons: [
				{
					text: 'JSON',
					action: function (e, dt, button, config) {
						var data = dt.buttons.exportData();

						DataTable.fileSave(new Blob([JSON.stringify(data)]), 'Export.json');
					}
				}
			]
		}
	}
});

]]>
</js>

<js-vanilla>
<![CDATA[

new DataTable('#example', {
	layout: {
		topStart: {
			buttons: [
				{
					text: 'JSON',
					action: function (e, dt, button, config) {
						var data = dt.buttons.exportData();

						DataTable.fileSave(new Blob([JSON.stringify(data)]), 'Export.json');
					}
				}
			]
		}
	}
});

]]>
</js-vanilla>

<title lib="Buttons">Custom file (JSON)</title>

<info><![CDATA[

Buttons uses the excellent [FileSaver.js](https://github.com/eligrey/FileSaver.js/) by Eli Grey in order to be able to create and download files on the client-side (i.e. for the CSV and Excel button types). Buttons' built in FileSaver.js is exposed via `b-api DataTable.fileSave()` when the HTML5 button types file is loaded, and it can be used to easily create your own custom files.

This example makes use of `b-api buttons.exportData()` to get data from the host DataTable and then create a file with JSON data in it using the `b-api DataTable.fileSave()` method.

]]></info>

</dt-example>

