<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ajax" order="6">

<css lib="datatables buttons"/>
<js lib="jquery datatables buttons jszip pdfmake vfsfonts buttons-html5">
<![CDATA[

$('#example').DataTable({
	ajax: '../../../../examples/ajax/data/objects.txt',
	columns: [
		{ data: 'name' },
		{ data: 'position' },
		{ data: 'office' },
		{ data: 'extn' },
		{ data: 'start_date' },
		{
			data: 'salary',
			render: function (data, type, row) {
				return type === 'export' ? data.replace(/[$,]/g, '') : data;
			}
		}
	],
	layout: {
		topStart: {
			buttons: [
				{
					extend: 'copyHtml5',
					exportOptions: { orthogonal: 'export' }
				},
				{
					extend: 'excelHtml5',
					exportOptions: { orthogonal: 'export' }
				},
				{
					extend: 'pdfHtml5',
					exportOptions: { orthogonal: 'export' }
				}
			]
		}
	}
});

]]>
</js>

<js-vanilla>
<![CDATA[

new DataTable('#example', {
	ajax: '../../../../examples/ajax/data/objects.txt',
	columns: [
		{ data: 'name' },
		{ data: 'position' },
		{ data: 'office' },
		{ data: 'extn' },
		{ data: 'start_date' },
		{
			data: 'salary',
			render: function (data, type, row) {
				return type === 'export' ? data.replace(/[$,]/g, '') : data;
			}
		}
	],
	layout: {
		topStart: {
			buttons: [
				{
					extend: 'copyHtml5',
					exportOptions: { orthogonal: 'export' }
				},
				{
					extend: 'excelHtml5',
					exportOptions: { orthogonal: 'export' }
				},
				{
					extend: 'pdfHtml5',
					exportOptions: { orthogonal: 'export' }
				}
			]
		}
	}
});

]]>
</js-vanilla>

<title lib="Buttons">Format output data - orthogonal data</title>

<info><![CDATA[

Buttons has two different methods that can be used to format the data exported differently from the data that is shown in the table: orthogonal options as shown in this example and [formatting functions](outputFormat-function.html). They both achieve basically the same thing in different ways: namely modification of the output data.

The orthogonal options are based upon [DataTables' support for orthogonal data](//datatables.net/manual/orthogonal-data) - specifically being able to use `dt-init columns.render` as an object for function to give DataTables different data for the different actions it needs to take.

By default Buttons will ask for the same data that is shown in the table (`-string display`) but the `orthogonal` option of the `exportOptions` parameter can be used to specify a different data point. In this example the orthogonal data for the exported buttons is set to be `export` and the `dt-init columns.render` function will return a deformatted string (stripping the `$` and `,` characters from the final column to make it a numeric value).

]]></info>

</dt-example>

