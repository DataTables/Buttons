<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="1">

<css lib="datatables buttons"/>
<js lib="jquery datatables buttons buttons-docgen">
<![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable( {
		ajax: '../../../../examples/ajax/data/objects.txt',
        columns: [
            { data: 'name' },
            { data: 'position' },
            { data: 'office' },
            { data: 'extn' },
            { data: 'start_date' },
            { data: 'salary', render: function (data, type, row) {
            	return type === 'export' ?
            		data.replace( /[$,]/g, '' ) :
            		data;
            } }
        ],
        dom: 'Bfrtip',
		buttons: ['csv', 'html', 'excel', 'pdf', 'print'],
        initComplete: function () {
            $('#dtstText').val(
                table.docGen.parse(undefined, {orthogonal: 'export'})
            );
        }
	} );
});

]]>
</js>

<title lib="Buttons">Orthogonal</title>

<info><![CDATA[

This is the Document Generator plug-in for Buttons. It allows for documents to be built on the server side and downloaded on the client side.

The server-side code can be found [here](). It is powered using nodeJS.

The data can be retrieved and set using the `-api docgen.parse()` method. The structure of the JSON object is fully [documented]().

<form action="http://192.168.234.234:8090/csv" method="post" id="dtst" target="hiddenframe"><textarea name="data" id="dtstText"></textarea></form>

]]></info>

</dt-example>

