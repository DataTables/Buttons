<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="13">

<css lib="datatables buttons">
	div.dt-buttons {
		clear: both;
	}
</css>
<js lib="jquery datatables buttons">
<![CDATA[

$('#example').DataTable({
	layout: {
		topStart: {
			buttons: [
				{
					text: 'Button 1',
					action: function (e, dt, node, config) {
						alert('Button 1 clicked on');
					}
				}
			]
		},
		bottom1Start: {
			buttons: [
				{
					text: 'Button 2',
					action: function (e, dt, node, conf) {
						alert('Button 2 clicked on');
					}
				},
				{
					text: 'Button 3',
					action: function (e, dt, node, conf) {
						alert('Button 3 clicked on');
					}
				}
			]
		}
	}
});

]]>
</js>

<js-vanilla>
<![CDATA[

new DataTable('#example', {
	layout: {
		topStart: {
			buttons: [
				{
					text: 'Button 1',
					action: function (e, dt, node, config) {
						alert('Button 1 clicked on');
					}
				}
			]
		},
		bottom1Start: {
			buttons: [
				{
					text: 'Button 2',
					action: function (e, dt, node, conf) {
						alert('Button 2 clicked on');
					}
				},
				{
					text: 'Button 3',
					action: function (e, dt, node, conf) {
						alert('Button 3 clicked on');
					}
				}
			]
		}
	}
});

]]>
</js-vanilla>

<title lib="Buttons">Multiple button groups</title>

<info><![CDATA[

Due to Buttons being registered with DataTables as a _feature_ you can create multiple different button groups, each with its own set of buttons and addressable by the API. This can be particularly useful if you wish to display button groups with different functionality (file export, editing, etc).

In this example the `-feature buttons` feature is used twice to insert one button at the top of the table and another two at the bottom.

]]></info>

</dt-example>

