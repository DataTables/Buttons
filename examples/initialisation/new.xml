<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="3">

<css lib="datatables buttons"/>
<js lib="jquery datatables buttons jszip pdfmake vfsfonts buttons-html5 buttons-print">
<![CDATA[

var table = $('#example').DataTable();

new DataTable.Buttons(table, {
	buttons: ['copy', 'csv', 'excel', 'pdf', 'print']
});

table
	.buttons(0, null)
	.container()
	.prependTo(table.table().container());

]]>
</js>

<js-vanilla>
<![CDATA[

let table = new DataTable('#example');

new DataTable.Buttons(table, {
	buttons: ['copy', 'csv', 'excel', 'pdf', 'print']
});

table
	.buttons(0, null)
	.container()
	.prependTo(table.table().container());

]]>
</js-vanilla>

<title lib="Buttons">Initialisation: instance</title>

<info><![CDATA[

Buttons will typically be initialised through the `-feature buttons` feature in the DataTables configuration object, but it is also possible to construct a new buttons list at any time using the `new DataTable.Buttons()` constructor. This constructor takes two parameters:

1. DataTable to apply the buttons to
2. Button options - this matches the options that can be given to the `b-init buttons` option.

This example shows a Buttons constructor being used to create a standard set of buttons and then insert into the document.

]]></info>

</dt-example>

