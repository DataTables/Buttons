<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="4">

<css lib="datatables buttons"/>
<js lib="jquery datatables buttons">
<![CDATA[

var table = $('#example').DataTable({
	layout: {
		topStart: {
			buttons: {
				name: 'first',
				buttons: [
					{
						text: 'Button 1',
						action: function (e, dt, node, conf) {
							console.log('Button 1 clicked on');
						}
					},
					{
						text: 'Button 2',
						action: function (e, dt, node, conf) {
							console.log('Button 2 clicked on');
						}
					}
				]
			}
		},
		bottom1Start: {
			buttons: {
				name: 'second',
				buttons: [
					{
						text: 'Button 3',
						action: function (e, dt, node, conf) {
							alert('Button 3 clicked on');
						}
					},
					{
						text: 'Button 4',
						action: function (e, dt, node, conf) {
							alert('Button 4 clicked on');
						}
					}
				]
			}
		}
	}
});

table.button('second', 0).text('Button 3 - API updated');

]]>
</js>

<js-vanilla>
<![CDATA[

let table = new DataTable('#example', {
	layout: {
		topStart: {
			buttons: {
				name: 'first',
				buttons: [
					{
						text: 'Button 1',
						action: function (e, dt, node, conf) {
							console.log('Button 1 clicked on');
						}
					},
					{
						text: 'Button 2',
						action: function (e, dt, node, conf) {
							console.log('Button 2 clicked on');
						}
					}
				]
			}
		},
		bottom1Start: {
			buttons: {
				name: 'second',
				buttons: [
					{
						text: 'Button 3',
						action: function (e, dt, node, conf) {
							alert('Button 3 clicked on');
						}
					},
					{
						text: 'Button 4',
						action: function (e, dt, node, conf) {
							alert('Button 4 clicked on');
						}
					}
				]
			}
		}
	}
});

table.button('second', 0).text('Button 3 - API updated');

]]>
</js-vanilla>

<title lib="Buttons">Group selection</title>

<info><![CDATA[

Multiple button sets can coexist together sharing the same DataTable as a host. When using the API you need the ability to select one, or more, of those groups, and thus the buttons in them to be able to take whatever action is required. This is provided through the `b-type button-group-selector` data type of the `b-api button()` and `b-api buttons()` methods.

The group selector, and the individual button selector (`b-type button-selector`) give the ability to select any button or buttons in any group or groups of buttons. Actions can also be taken on a whole group of buttons.

This example shows Buttons multiple button groups being creating with the `-init layout` option and `-feature buttons` feature. We set `-feature buttons.name` to be able to easily address each group via the API (this is optional, an index can also be used), and then use the `-api button().text()` method to update the text for one button (simply as a demonstration of how to use the multi-feature API).

]]></info>

</dt-example>

